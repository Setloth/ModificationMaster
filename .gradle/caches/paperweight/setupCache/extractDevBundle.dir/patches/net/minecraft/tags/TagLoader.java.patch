--- a/net/minecraft/tags/TagLoader.java
+++ b/net/minecraft/tags/TagLoader.java
@@ -79,7 +79,10 @@
         return list.isEmpty() ? Either.right(builder.build()) : Either.left(list);
     }
 
-    public Map<ResourceLocation, Collection<T>> build(Map<ResourceLocation, List<TagLoader.EntryWithSource>> tags) {
+    // Paper start - fire tag registrar events
+    public Map<ResourceLocation, Collection<T>> build(Map<ResourceLocation, List<TagLoader.EntryWithSource>> tags, @Nullable io.papermc.paper.tag.TagEventConfig<T, ?> eventConfig) {
+        tags = io.papermc.paper.tag.PaperTagListenerManager.INSTANCE.firePreFlattenEvent(tags, eventConfig);
+        // Paper end - fire tag registrar events
         final Map<ResourceLocation, Collection<T>> map = Maps.newHashMap();
         TagEntry.Lookup<T> lookup = new TagEntry.Lookup<T>() {
             @Nullable
@@ -107,11 +110,13 @@
                     )
                     .ifRight(resolvedEntries -> map.put(id, (Collection<T>)resolvedEntries))
         );
-        return map;
+        return io.papermc.paper.tag.PaperTagListenerManager.INSTANCE.firePostFlattenEvent(map, eventConfig); // Paper - fire tag registrar events
     }
 
-    public Map<ResourceLocation, Collection<T>> loadAndBuild(ResourceManager manager) {
-        return this.build(this.load(manager));
+    // Paper start - fire tag registrar events
+    public Map<ResourceLocation, Collection<T>> loadAndBuild(ResourceManager manager, @Nullable io.papermc.paper.tag.TagEventConfig<T, ?> eventConfig) {
+        return this.build(this.load(manager), eventConfig);
+        // Paper end - fire tag registrar events
     }
 
     public static record EntryWithSource(TagEntry entry, String source) {
